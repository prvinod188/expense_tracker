import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import csv

class Expense:
    def __init__(self, amount, description, category, date):
        self.amount = amount
        self.description = description
        self.category = category
        self.date = date

class ExpenseTracker:
    def __init__(self, file_path):
        self.expenses = []
        self.file_path = file_path
        self.load_expenses()

    def add_expense(self, amount, description, category):
        date = datetime.now().strftime("%Y-%m-%d")
        expense = Expense(amount, description, category, date)
        self.expenses.append(expense)
        self.save_expense(expense)
        return expense

    def view_expenses(self):
        return self.expenses

    def save_expense(self, expense):
        with open(self.file_path, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([expense.amount, expense.description, expense.category, expense.date])

    def load_expenses(self):
        try:
            with open(self.file_path, mode='r') as file:
                reader = csv.reader(file)
                for row in reader:
                    amount, description, category, date = row
                    self.expenses.append(Expense(float(amount), description, category, date))
        except FileNotFoundError:
            with open(self.file_path, mode='w', newline='') as file:
                pass

def add_expense():
    try:
        amount = float(amount_entry.get())
        description = description_entry.get()
        category = category_entry.get()
        if description == "" or category == "":
            raise ValueError("Description and Category cannot be empty.")
        expense = tracker.add_expense(amount, description, category)
        messagebox.showinfo("Success", f"Added expense: {expense.amount} for {expense.description} in {expense.category}")
        clear_entries()
    except ValueError as e:
        messagebox.showerror("Error", str(e))

def view_expenses():
    expenses = tracker.view_expenses()
    summary = ""
    for expense in expenses:
        summary += f"{expense.date}: {expense.amount} - {expense.description} ({expense.category})\n"
    messagebox.showinfo("Expenses", summary)

def clear_entries():
    amount_entry.delete(0, tk.END)
    description_entry.delete(0, tk.END)
    category_entry.delete(0, tk.END)

# Create the main window
root = tk.Tk()
root.title("Expense Tracker")

# Set up a colorful theme
style = ttk.Style(root)
style.theme_use('clam')
style.configure('TLabel', font=('Arial', 12), foreground='blue')
style.configure('TEntry', font=('Arial', 12))
style.configure('TButton', font=('Arial', 12), foreground='green', padding=10)

# Create and place the widgets
ttk.Label(root, text="Amount:").grid(row=0, column=0, padx=10, pady=10, sticky='w')
amount_entry = ttk.Entry(root)
amount_entry.grid(row=0, column=1, padx=10, pady=10, sticky='ew')

ttk.Label(root, text="Description:").grid(row=1, column=0, padx=10, pady=10, sticky='w')
description_entry = ttk.Entry(root)
description_entry.grid(row=1, column=1, padx=10, pady=10, sticky='ew')

ttk.Label(root, text="Category:").grid(row=2, column=0, padx=10, pady=10, sticky='w')
category_entry = ttk.Entry(root)
category_entry.grid(row=2, column=1, padx=10, pady=10, sticky='ew')

add_button = ttk.Button(root, text="Add Expense", command=add_expense)
add_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

view_button = ttk.Button(root, text="View Expenses", command=view_expenses)
view_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

# Initialize the ExpenseTracker with CSV file
tracker = ExpenseTracker('expenses.csv')

# Run the main event loop
root.mainloop()
